	//thread to update and draw. Game loop
	public void run() {
		Canvas canvas;

		while (isRunning) {
			canvas = null;
			if (gameState == READY)    updateReady(canvas);
			if (gameState == RUNNING)  updateRunning(canvas);
			if (gameState == GAMEOVER) updateGameOver(canvas);
			
			
		}
	}
	
	private void updateReady(Canvas canvas){
		
	}
	
	private void updateRunning(Canvas canvas){
		
		long beginTime; // the time when the cycle begun
		long timeDiff; // the time it took for the cycle to execute
		int sleepTime; // ms to sleep (<0 if we're behind)
		int framesSkipped; // number of frames being skipped
		sleepTime = 0;
		try {
			canvas = surfaceHolder.lockCanvas();
			if (canvas == null) {
				try {
					Thread.sleep(100);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				surfaceHolder = getHolder();
			} else {

				synchronized (surfaceHolder) {
					beginTime = System.currentTimeMillis();
					framesSkipped = 0; // resetting the frames skipped

					gameEngine.update();
						
					canvas.drawRGB(0, 0, 0);

					drawMaze(canvas); // draw updated maze

					drawPacmon(canvas, direction); // draw Pacman

					drawGhost(canvas); // draw ghosts
					
					drawScore(canvas); // draw score and lives
					
					if (gameEngine.getGameState() == 2)   gameOver(canvas); // time up or dead, GAME OVER

					// calculate how long did the cycle take
					timeDiff = System.currentTimeMillis() - beginTime;
					// calculate sleep time
					sleepTime = (int) (FRAME_PERIOD - timeDiff);

					if (sleepTime > 0) {
						// if sleepTime > 0 we're OK
						try {
							// send the thread to sleep for a short period
							// very useful for battery saving
							Thread.sleep(sleepTime);
						} catch (InterruptedException e) {
						}
					}

					while (sleepTime < 0 && framesSkipped < MAX_FRAME_SKIPS) {
						// we need to catch up
						// update without rendering
						gameEngine.update();
						// add frame period to check if in next frame
						sleepTime += FRAME_PERIOD;
						framesSkipped++;
					}
				}
			}
		} finally {
			// in case of an exception the surface is not left in
			// an inconsistent state
			if (canvas != null) {
				surfaceHolder.unlockCanvasAndPost(canvas);
			}
		}
	}
	
	private void updateGameOver(Canvas canvas){
		
	}
	


	//update ghost movements and locations
	public void updateGhost(){
		int gNormalSpeed = ghosts.get(0).getNormalSpeed();
		int XmodW, YmodH;
		int boxX, boxY;
		int gX, gY;
		
		
		for (int i = 0; i < ghosts.size(); i++) {
			gX = ghosts.get(i).getX();
			gY = ghosts.get(i).getY();
			XmodW = gX % blockSize;
			YmodH = gY % blockSize;
			boolean movable = true;

			int ghostNewDir = ghosts.get(i).getDir();
			int randDirection = ghostNewDir;
			
			// check direction and change if it is allowed
			if (XmodW == 0 && YmodH == 0) {
				randDirection = ((int)Math.random()*4) + 1;
				boxX = gX / blockSize;
				boxY = gY / blockSize;

				if (randDirection == 4) { // move left allowed if can move to left
					if (boxX > 0)
						if (mazeArray[boxY][boxX - 1] != 0)
							ghostNewDir = randDirection;
				}
				if (randDirection == 3) { // move right
					if (boxX < mazeColumn)
						if (mazeArray[boxY][boxX + 1] != 0)
							ghostNewDir = randDirection;
				}
				if (randDirection == 2) { // move down
					if (boxY < mazeRow)
						if (mazeArray[boxY + 1][boxX] != 0)
							ghostNewDir = randDirection;
				}
				if (randDirection == 1) { // move up
					if (boxY > 0)
						if (mazeArray[boxY - 1][boxX] != 0)
							ghostNewDir = randDirection;
				}
			} else {
				if (newDirection != randDirection) {
					if (((randDirection == 1) || (randDirection == 2))
							&& (XmodW == 0) && (YmodH != 0)) {
						ghostNewDir = randDirection;
					}
					if (((randDirection == 3) || (randDirection == 4))
							&& (YmodH == 0) && (XmodW != 0)) {
						ghostNewDir = randDirection;
					}
				}
			}

			ghosts.get(i).setDir(ghostNewDir);

			// evaluate at intersection, collision detection
			if (XmodW == 0 && YmodH == 0) {
				boxX = gX / blockSize;
				boxY = gY / blockSize;

				movable = true;

				if (ghostNewDir == 4) { // move left
					if (boxX > 0)
						if (mazeArray[boxY][boxX - 1] == 0) {
							movable = false;
						}
				}

				if (ghostNewDir == 3) { // move right
					if (boxX < mazeColumn - 1)
						if (mazeArray[boxY][boxX + 1] == 0) {
							movable = false;
						}
				}

				if (ghostNewDir == 2) { // move down
					if (boxY < mazeRow - 1)
						if (mazeArray[boxY + 1][boxX] == 0) {
							movable = false;
						}
				}
				if (ghostNewDir == 1) { // move up
					if (boxY > 0)
						if (mazeArray[boxY - 1][boxX] == 0) {
							movable = false;
						}
				}

			}

			if (movable) {
				if (ghostNewDir == 1) // up
					gY = gY - gNormalSpeed;
				if (ghostNewDir == 2) // down
					gY = gY + gNormalSpeed;
				if (ghostNewDir == 3) // right
					gX = gX + gNormalSpeed;
				if (ghostNewDir == 4) // left
					gX = gX - gNormalSpeed;
			}

			ghosts.get(i).setX(gX);
			ghosts.get(i).setY(gY);

		}
	}
	

